{
  "version": 3,
  "sources": ["../components/App.tsx", "../components/Counter.tsx", "../components/Files.tsx"],
  "sourcesContent": ["import { hydrate } from \"preact\";\r\nimport { Counter } from \"./Counter.tsx\";\r\nimport { Files } from \"./Files.tsx\";\r\n\r\ninterface AppProps {\r\n  counter: number;\r\n  files: string[];\r\n}\r\n\r\nexport function App({ counter: initialCounter, files }: AppProps) {\r\n  return (\r\n    <>\r\n      <h1>Hello World</h1>\r\n      <p>This is a t0555000</p>\r\n      <Counter initialCounter={initialCounter} />\r\n      <Files files={files} />\r\n    </>\r\n  );\r\n}\r\n\r\n// Hydrate App\r\nif (typeof globalThis.document !== \"undefined\") {\r\n  const appElement = document.getElementById(\"app\");\r\n\r\n  if (appElement) {\r\n    // deno-lint-ignore no-explicit-any\r\n    const initialData = (globalThis as any).__INITIAL_DATA__;\r\n    const { counter, files } = initialData;\r\n\r\n    hydrate(\r\n      <App counter={counter} files={files} />,\r\n      appElement,\r\n    );\r\n  }\r\n}\r\n", "import { useEffect, useState } from \"preact/hooks\";\r\n\r\ninterface CounterProps {\r\n  initialCounter: number;\r\n}\r\n\r\nexport function Counter({ initialCounter }: CounterProps) {\r\n  const [counter, setCounter] = useState(initialCounter);\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  // Update counter display and show status\r\n  const updateCounter = (newValue: number, message = \"\") => {\r\n    setCounter(newValue);\r\n    if (message) {\r\n      setStatus(message);\r\n      setTimeout(() => setStatus(\"\"), 2000);\r\n    }\r\n  };\r\n\r\n  // Make API call and handle response\r\n  const apiCall = async (endpoint: string, method = \"GET\") => {\r\n    try {\r\n      setStatus(\"Updating...\");\r\n\r\n      const response = await fetch(`/api/counter${endpoint}`, {\r\n        method: method,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      updateCounter(data.counter, \"Updated!\");\r\n    } catch (error) {\r\n      console.error(\"API call failed:\", error);\r\n      setStatus(\"Error updating counter\");\r\n      setTimeout(() => setStatus(\"\"), 2000);\r\n    }\r\n  };\r\n\r\n  // Periodically sync with server (every 5 seconds)\r\n  useEffect(() => {\r\n    const interval = setInterval(async () => {\r\n      try {\r\n        const response = await fetch(\"/api/counter\");\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          // Only update if the value changed (to avoid overwriting during user interaction)\r\n          if (data.counter !== counter) {\r\n            setCounter(data.counter);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // Silent fail for background sync\r\n        console.log(\"Background sync failed:\", error);\r\n      }\r\n    }, 5000);\r\n\r\n    return () => clearInterval(interval);\r\n  }, [counter]);\r\n\r\n  return (\r\n    <div class=\"counter-section\">\r\n      <h2>Server State Counter</h2>\r\n      <div class=\"counter-display\">\r\n        <span id=\"counter-value\">{counter}</span>\r\n      </div>\r\n      <div class=\"counter-controls\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => apiCall(\"/increment\", \"POST\")}\r\n        >\r\n          +\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => apiCall(\"/decrement\", \"POST\")}\r\n        >\r\n          ---\r\n        </button>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => apiCall(\"/reset\", \"POST\")}\r\n        >\r\n          Reset\r\n        </button>\r\n      </div>\r\n      <div class=\"status\">{status}</div>\r\n    </div>\r\n  );\r\n}\r\n", "interface FilesProps {\r\n  files: string[];\r\n}\r\n\r\nexport function Files({ files }: FilesProps) {\r\n  return (\r\n    <div class=\"files-section\">\r\n      <h3>Files:</h3>\r\n      <p>{files.join(\", \")}</p>\r\n    </div>\r\n  );\r\n}\r\n"],
  "mappings": "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",
  "names": ["jsx", "jsxs", "jsx", "jsxs"]
}
